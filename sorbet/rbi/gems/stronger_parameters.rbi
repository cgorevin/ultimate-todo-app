# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/stronger_parameters/all/stronger_parameters.rbi
#
# stronger_parameters-2.12.1

module StrongerParameters
end
class StrongerParameters::InvalidValue
  def initialize(value, message); end
  def message; end
  def value; end
end
class StrongerParameters::InvalidParameter < StandardError
  def initialize(invalid_value, key); end
  def key; end
  def value; end
end
class StrongerParameters::Constraint
  def &(other); end
  def ==(other); end
  def required; end
  def required?; end
  def value(v); end
  def |(other); end
end
class StrongerParameters::OrConstraint < StrongerParameters::Constraint
  def ==(other); end
  def constraints; end
  def initialize(*constraints); end
  def required?; end
  def value(v); end
  def |(other); end
end
class StrongerParameters::AndConstraint < StrongerParameters::Constraint
  def &(other); end
  def ==(other); end
  def constraints; end
  def initialize(*constraints); end
  def required?; end
  def value(v); end
end
class StrongerParameters::RequiredConstraint < StrongerParameters::Constraint
  def initialize(other); end
  def required?; end
  def value(v); end
end
class StrongerParameters::StringConstraint < StrongerParameters::Constraint
  def ==(other); end
  def initialize(options = nil); end
  def maximum_length; end
  def minimum_length; end
  def value(v); end
end
class StrongerParameters::FloatConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::DateTimeConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::DateTimeIso8601Constraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::RegexpConstraint < StrongerParameters::Constraint
  def ==(other); end
  def initialize(regexp); end
  def regexp; end
  def value(v); end
end
class StrongerParameters::IntegerConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::NilConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::BooleanConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::ArrayConstraint < StrongerParameters::Constraint
  def ==(other); end
  def initialize(item_constraint); end
  def item_constraint; end
  def value(v); end
end
class StrongerParameters::HashConstraint < StrongerParameters::Constraint
  def ==(other); end
  def constraints; end
  def initialize(constraints); end
  def merge(other); end
  def value(v); end
end
class StrongerParameters::EnumerationConstraint < StrongerParameters::Constraint
  def ==(other); end
  def allowed; end
  def initialize(*allowed); end
  def value(v); end
end
class StrongerParameters::ComparisonConstraints < StrongerParameters::Constraint
  def ==(other); end
  def initialize(limit); end
  def limit; end
  def value(*arg0); end
end
class StrongerParameters::LessThanConstraint < StrongerParameters::ComparisonConstraints
  def value(v); end
end
class StrongerParameters::LessThanOrEqualConstraint < StrongerParameters::ComparisonConstraints
  def value(v); end
end
class StrongerParameters::GreaterThanConstraint < StrongerParameters::ComparisonConstraints
  def value(v); end
end
class StrongerParameters::GreaterThanOrEqualConstraint < StrongerParameters::ComparisonConstraints
  def value(v); end
end
class StrongerParameters::NilStringConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::FileConstraint < StrongerParameters::Constraint
  def value(v); end
end
class StrongerParameters::DecimalConstraint < StrongerParameters::Constraint
  def initialize(precision, scale); end
  def value(v); end
end
class StrongerParameters::HexConstraint < StrongerParameters::Constraint
  def value(v); end
end
module StrongerParameters::Parameters
  def hash_filter_with_stronger_parameters(params, filter); end
  extend ActiveSupport::Concern
end
module StrongerParameters::Parameters::ClassMethods
  def anything; end
  def array(item_constraint); end
  def bigid; end
  def boolean; end
  def datetime; end
  def datetime_iso8601; end
  def decimal(precision = nil, scale = nil); end
  def enum(*allowed); end
  def enumeration(*allowed); end
  def file; end
  def float; end
  def gt(limit); end
  def gte(limit); end
  def hex; end
  def id; end
  def integer32; end
  def integer64; end
  def integer; end
  def lt(limit); end
  def lte(limit); end
  def map(constraints = nil); end
  def nil; end
  def nil_string; end
  def regexp(regex); end
  def string(options = nil); end
  def ubigid; end
  def uid; end
end
module StrongerParameters::ControllerSupport
  extend ActiveSupport::Concern
end
class ActionController::Parameters
  def hash_filter_without_stronger_parameters(params, filter); end
  def self.action_on_invalid_parameters; end
  def self.action_on_invalid_parameters=(obj); end
  def self.allow_nil_for_everything; end
  def self.allow_nil_for_everything=(obj); end
  extend StrongerParameters::Parameters::ClassMethods
  include StrongerParameters::Parameters
end
class ActionController::Base < ActionController::Metal
  include StrongerParameters::ControllerSupport
end
module StrongerParameters::ControllerSupport::PermittedParameters
  def flat_keys(hash); end
  def permit_parameters; end
  def self.included(klass); end
  def self.sugar(value); end
  def show_unpermitted_keys(unpermitted_keys, log_unpermitted); end
  def without_invalid_parameter_exceptions(log); end
end
module StrongerParameters::ControllerSupport::PermittedParameters::ClassMethods
  def log_invalid_parameters!; end
  def permit_parameters; end
  def permitted_parameters(action, permitted); end
  def permitted_parameters_for(action); end
  def self.extended(base); end
end
