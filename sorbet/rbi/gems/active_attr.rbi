# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/active_attr/all/active_attr.rbi
#
# active_attr-0.15.1

module ActiveAttr
  extend ActiveSupport::Autoload
end
class ActiveAttr::AttributeDefinition
  def <=>(other); end
  def [](key); end
  def initialize(name, options = nil); end
  def inspect; end
  def name; end
  def options; end
  def to_s; end
  def to_sym; end
  include Comparable
end
module ActiveAttr::Error
end
class ActiveAttr::DangerousAttributeError < ScriptError
  include ActiveAttr::Error
end
class ActiveAttr::UnknownAttributeError < NoMethodError
  include ActiveAttr::Error
end
module ActiveAttr::Attributes
  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def attribute(name); end
  def attribute=(name, value); end
  def attributes; end
  def attributes_map; end
  def inspect; end
  def read_attribute(name); end
  def self.filter_attributes; end
  def self.filter_attributes=(new_filter_attributes); end
  def write_attribute(name, value); end
  extend ActiveSupport::Concern
  include ActiveModel::AttributeMethods
end
module ActiveAttr::Attributes::ClassMethods
  def attribute!(name, options = nil); end
  def attribute(name, options = nil); end
  def attribute_methods(name); end
  def attribute_names; end
  def attributes; end
  def attributes=(attributes); end
  def dangerous_attribute?(name); end
  def inherited(subclass); end
  def inspect; end
  def instance_method_already_implemented?(method_name); end
end
module ActiveAttr::Logger
  def self.logger; end
  def self.logger=(new_logger); end
  def self.logger?; end
  extend ActiveSupport::Concern
end
class ActiveAttr::Railtie < Rails::Railtie
end
