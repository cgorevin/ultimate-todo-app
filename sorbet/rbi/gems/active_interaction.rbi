# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/active_interaction/all/active_interaction.rbi
#
# active_interaction-3.8.3

module ActiveInteraction
end
class ActiveInteraction::Error < StandardError
end
class ActiveInteraction::InvalidClassError < ActiveInteraction::Error
end
class ActiveInteraction::InvalidConverterError < ActiveInteraction::Error
end
class ActiveInteraction::InvalidDefaultError < ActiveInteraction::Error
end
class ActiveInteraction::InvalidFilterError < ActiveInteraction::Error
end
class ActiveInteraction::InvalidInteractionError < ActiveInteraction::Error
  def interaction; end
  def interaction=(arg0); end
end
class ActiveInteraction::InvalidValueError < ActiveInteraction::Error
end
class ActiveInteraction::MissingFilterError < ActiveInteraction::Error
end
class ActiveInteraction::MissingValueError < ActiveInteraction::Error
end
class ActiveInteraction::NoDefaultError < ActiveInteraction::Error
end
class ActiveInteraction::InvalidNestedValueError < ActiveInteraction::InvalidValueError
  def filter_name; end
  def initialize(filter_name, input_value); end
  def input_value; end
end
class ActiveInteraction::Interrupt < ActiveInteraction::Error
  def errors; end
  def initialize(errors); end
end
class ActiveInteraction::Errors < ActiveModel::Errors
  def attribute?(attribute); end
  def backtrace; end
  def backtrace=(arg0); end
  def detailed_error?(detail); end
  def merge!(other); end
  def merge_detail!(attribute, detail, message); end
  def merge_details!(other); end
  def merge_message!(attribute, message); end
  def merge_messages!(other); end
end
module ActiveInteraction::ActiveModelable
  def i18n_scope; end
  def model_name(*args, &block); end
  def new_record?; end
  def persisted?; end
  extend ActiveModel::Naming
  extend ActiveSupport::Concern
  include ActiveModel::Conversion
  include ActiveModel::Validations
end
module ActiveInteraction::ActiveModelable::ClassMethods
  def i18n_scope; end
end
module ActiveInteraction::ActiveRecordable
  def column_for_attribute(name); end
  def has_attribute?(name); end
end
module ActiveInteraction::Hashable
  def hash(*args, &block); end
  extend ActiveSupport::Concern
end
module ActiveInteraction::Missable
  def filter(slug); end
  def method_missing(slug, *args); end
  def respond_to_missing?(slug, *arg1); end
  extend ActiveSupport::Concern
end
module ActiveInteraction::Runnable
  def compose(other, *args); end
  def errors; end
  def execute; end
  def result; end
  def result=(result); end
  def run!; end
  def run; end
  def valid?(*arg0); end
  extend ActiveSupport::Concern
  include ActiveModel::Validations
end
module ActiveInteraction::Runnable::ClassMethods
  def new(*arg0); end
  def run!(*args); end
  def run(*args); end
end
class ActiveInteraction::GroupedInput < OpenStruct
end
module ActiveInteraction::InputProcessor
  def self.assign_to_group!(inputs, key, index, value); end
  def self.process(inputs); end
  def self.reserved?(name); end
end
module ActiveInteraction::Validation
  def self.error_args(filter, error); end
  def self.type(filter); end
  def self.validate(context, filters, inputs); end
end
class ActiveInteraction::FilterColumn
  def initialize(type); end
  def limit; end
  def number?; end
  def self.intern(type); end
  def self.new(*arg0); end
  def text?; end
  def type; end
end
class ActiveInteraction::Filter
  def cast(value, _interaction); end
  def clean(value, context); end
  def database_column_type; end
  def default(context = nil); end
  def default?; end
  def desc; end
  def describe(value); end
  def filters; end
  def initialize(name, options = nil, &block); end
  def name; end
  def options; end
  def raw_default(context); end
  def self.factory(slug); end
  def self.register(slug); end
  def self.slug; end
end
class ActiveInteraction::AbstractFilter < ActiveInteraction::Filter
  def klass; end
end
class ActiveInteraction::Base
  def __callbacks; end
  def __callbacks?; end
  def _execute_callbacks; end
  def _run_execute_callbacks(&block); end
  def _run_type_check_callbacks(&block); end
  def _run_validate_callbacks(&block); end
  def _type_check_callbacks; end
  def _validate_callbacks; end
  def _validators; end
  def _validators?; end
  def given?(input, *rest); end
  def initialize(inputs = nil); end
  def inputs; end
  def model_name(*args, &block); end
  def normalize_inputs!(inputs); end
  def populate_filters(inputs); end
  def populate_reader(key, value); end
  def process_inputs(inputs); end
  def run_validations!; end
  def self.__callbacks; end
  def self.__callbacks=(val); end
  def self.__callbacks?; end
  def self._execute_callbacks; end
  def self._execute_callbacks=(value); end
  def self._type_check_callbacks; end
  def self._type_check_callbacks=(value); end
  def self._validate_callbacks; end
  def self._validate_callbacks=(value); end
  def self._validators; end
  def self._validators=(val); end
  def self._validators?; end
  def self.add_filter(klass, name, options, &block); end
  def self.desc(desc = nil); end
  def self.eagerly_evaluate_default(filter); end
  def self.filters; end
  def self.import_filters(klass, options = nil); end
  def self.inherited(klass); end
  def self.initialize_filter(filter); end
  def self.method_missing(*args, &block); end
  def type_check; end
  def validation_context; end
  def validation_context=(arg0); end
  extend ActiveInteraction::ActiveModelable::ClassMethods
  extend ActiveInteraction::Runnable::ClassMethods
  extend ActiveModel::Callbacks
  extend ActiveModel::Conversion::ClassMethods
  extend ActiveModel::Naming
  extend ActiveModel::Translation
  extend ActiveModel::Validations::ClassMethods
  extend ActiveModel::Validations::HelperMethods
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveInteraction::ActiveModelable
  include ActiveInteraction::ActiveRecordable
  include ActiveInteraction::Runnable
  include ActiveModel::Conversion
  include ActiveModel::Validations
  include ActiveModel::Validations
  include ActiveModel::Validations::HelperMethods
  include ActiveSupport::Callbacks
end
class ActiveInteraction::InterfaceFilter < ActiveInteraction::Filter
  def cast(value, _interaction); end
  def matches?(object); end
  def methods; end
end
class ActiveInteraction::AbstractDateTimeFilter < ActiveInteraction::AbstractFilter
  def _cast(value, _interaction); end
  def cast(value, context); end
  def convert(value, context); end
  def database_column_type; end
  def format; end
  def format?; end
  def klasses; end
  def stringify(value); end
end
class ActiveInteraction::AbstractNumericFilter < ActiveInteraction::AbstractFilter
  def _cast(value, _interaction); end
  def cast(value, context); end
  def convert(value, context); end
  def database_column_type; end
end
class ActiveInteraction::ArrayFilter < ActiveInteraction::Filter
  def cast(value, context); end
  def classes; end
  def method_missing(*arg0, &block); end
  def validate!(filter, names); end
  include ActiveInteraction::Missable
end
class ActiveInteraction::BooleanFilter < ActiveInteraction::Filter
  def cast(value, _interaction); end
  def database_column_type; end
end
class ActiveInteraction::DateFilter < ActiveInteraction::AbstractDateTimeFilter
end
class ActiveInteraction::DateTimeFilter < ActiveInteraction::AbstractDateTimeFilter
  def database_column_type; end
end
class ActiveInteraction::DecimalFilter < ActiveInteraction::AbstractNumericFilter
  def cast(value, _interaction); end
  def decimal_from_string(value); end
  def digits; end
  def klass; end
end
class ActiveInteraction::FileFilter < ActiveInteraction::InterfaceFilter
  def database_column_type; end
  def methods; end
end
class ActiveInteraction::FloatFilter < ActiveInteraction::AbstractNumericFilter
end
class ActiveInteraction::HashFilter < ActiveInteraction::Filter
  def cast(value, context); end
  def clean_value(h, name, filter, value, context); end
  def method_missing(*args, &block); end
  def raw_default(*arg0); end
  def strip?; end
  include ActiveInteraction::Missable
end
class ActiveInteraction::IntegerFilter < ActiveInteraction::AbstractNumericFilter
  def base; end
  def convert(value, context); end
end
class ActiveInteraction::ObjectFilter < ActiveInteraction::Filter
  def cast(value, context, reconstantize: nil, convert: nil); end
  def convert(klass, value, converter); end
  def klass; end
  def matches?(value); end
end
class ActiveInteraction::RecordFilter < ActiveInteraction::Filter
  def cast(value, context, reconstantize: nil, convert: nil); end
  def find(klass, value, finder); end
  def klass; end
  def matches?(value); end
end
class ActiveInteraction::StringFilter < ActiveInteraction::Filter
  def cast(value, _interaction); end
  def strip?; end
end
class ActiveInteraction::SymbolFilter < ActiveInteraction::Filter
  def cast(value, _interaction); end
end
class ActiveInteraction::TimeFilter < ActiveInteraction::AbstractDateTimeFilter
  def _klass; end
  def cast(value, _interaction); end
  def database_column_type; end
  def initialize(name, options = nil, &block); end
  def klass; end
  def klasses; end
end
module ActiveInteraction::Errors::Details
  def add_with_details(attribute, message = nil, options = nil); end
  def clear_with_details; end
  def delete_with_details(attribute); end
  def initialize_dup_with_details(other); end
  def initialize_with_details(base); end
  extend ActiveSupport::Concern
end
