# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/active_hash_relation/all/active_hash_relation.rbi
#
# active_hash_relation-1.4.1

module ActiveHashRelation
  def aggregations(resource, params, model: nil); end
  def apply_filters(resource, params, include_associations: nil, model: nil); end
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure; end
  def self.initialize!; end
end
module ActiveHashRelation::Helpers
  def engine_name; end
  def find_model(model); end
  def model_class_name(resource, _engine = nil); end
end
module ActiveHashRelation::ColumnFilters
  def apply_leq_geq_le_ge_filters(resource, table_name, column, param); end
  def apply_like_filters(resource, table_name, column, param); end
  def filter_boolean(resource, column, table_name, param); end
  def filter_date(resource, column, table_name, param); end
  def filter_datetime(resource, column, table_name, param); end
  def filter_decimal(resource, column, table_name, param); end
  def filter_float(resource, column, table_name, param); end
  def filter_integer(resource, column, table_name, param); end
  def filter_string(resource, column, table_name, param); end
  def filter_text(resource, column, table_name, param); end
  def null_filters(resource, table_name, column, param); end
end
module ActiveHashRelation::ScopeFilters
  def filter_scopes(resource, params, model = nil); end
end
module ActiveHashRelation::SortFilters
  def apply_hash_sort(resource, params, model = nil); end
  def apply_sort(resource, params, model = nil); end
end
module ActiveHashRelation::LimitFilters
  def apply_limit(resource, limit); end
end
module ActiveHashRelation::AssociationFilters
  def filter_associations(resource, params, model = nil); end
end
class ActiveHashRelation::FilterApplier
  def apply_filters; end
  def configuration; end
  def filter_class(resource_name); end
  def initialize(resource, params, include_associations: nil, model: nil, is_not: nil); end
  def run_not_filters; end
  def run_or_filters; end
  include ActiveHashRelation::AssociationFilters
  include ActiveHashRelation::ColumnFilters
  include ActiveHashRelation::Helpers
  include ActiveHashRelation::LimitFilters
  include ActiveHashRelation::ScopeFilters
  include ActiveHashRelation::SortFilters
end
class ActiveHashRelation::Aggregation
  def apply; end
  def apply_aggregations(available_aggr, asked_aggr, column); end
  def configuration; end
  def initialize(resource, params, model: nil); end
  def model; end
  def params; end
  def resource; end
  include ActiveHashRelation::Helpers
end
class ActiveHashRelation::Configuration
  def filter_active_record_scopes; end
  def filter_active_record_scopes=(arg0); end
  def filter_class_prefix; end
  def filter_class_prefix=(arg0); end
  def filter_class_suffix; end
  def filter_class_suffix=(arg0); end
  def has_filter_classes; end
  def has_filter_classes=(arg0); end
  def use_unscoped; end
  def use_unscoped=(arg0); end
end
